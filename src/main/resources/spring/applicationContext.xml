<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
                            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <context:component-scan base-package="spring"/>

    <bean id="lazyBean" class="spring.bean.LazyBean" init-method="init"
          lazy-init="default" scope="prototype"/>

    <bean id="defautlBean" class="spring.bean.PreInstantiationBean">
        <property name="id" value="10"/>
        <property name="name" value="hello"/>
    </bean>

    <aop:aspectj-autoproxy/>

    <bean id="aspectBean" class="spring.aop.MyAspect"/>
    <bean id="fooService" class="spring.aop.FooService"/>

    <aop:config>

        <aop:aspect id="myAspect" ref="aspectBean">
            <aop:pointcut id="pointcut" expression="execution(* spring.aop.FooService.*(..))"/>
            <aop:before method="beforeAdvice" pointcut-ref="pointcut"/>
            <aop:after-returning method="afterRetureAdvice" pointcut-ref="pointcut" returning="retVal"/>
        </aop:aspect>
    </aop:config>
    <!--<bean class="spring.config.BeanPostProcessorImpl"/>-->

    <bean id="customMethodRep" class="spring.bean.CustomMethodReplacer"/>

    <bean id="lookupBean" class="spring.bean.LookupMethod">
        <lookup-method name="createLazyBean" bean="lazyBean"/>
        <replaced-method name="getValue" replacer="customMethodRep"/>
    </bean>

    <!--jdbc configuration -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <property name="url" value="${url}"/>
        <property name="driverClassName" value="${driverClassName}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <constructor-arg name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <tx:annotation-driven transaction-manager="txManager"/>

    <bean id="helloService" class="spring.service.impl.HelloServiceImpl">
        <property name="name" value="deacon"/>
    </bean>

    <bean id="myFactoryBean" class="spring.config.MyFactoryBean">
        <property name="interfaceName" value="spring.service.HelloService"/>
        <property name="target" ref="helloService"/>
    </bean>

    <bean id="clientService" class="spring.bean.ClientService"/>

    <bean id="factoryMethod" class="spring.bean.ClientService" factory-method="newInstance"/>

    <bean id="beanFactoryMethod" factory-bean="clientService" factory-method="createInstance"/>

    <bean id="prototypeBean" class="spring.bean.PrototypeBean" scope="prototype">
        <aop:scoped-proxy/>
    </bean>

    <bean id="singletonBean" class="spring.bean.SingletonBean" scope="singleton">
        <property name="prototypeBean" ref="prototypeBean"/>
    </bean>
</beans>