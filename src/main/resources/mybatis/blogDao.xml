<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="spring.dao.IBlogDao">

    <!--关联嵌套/集合查询-->
    <!--<resultMap id="blogResult" type="spring.entity.Blog">-->
        <!--<id property="id" column="id"/>-->
        <!--<result property="name" column="name"/>-->
        <!--<association property="author" column="author_id" javaType="spring.entity.Author" select="selectAuthorById"/>-->
        <!--<collection property="articles" column="id" javaType="java.util.ArrayList" ofType="spring.entity.Article" select="selectArticleByBlogId"/>-->
    <!--</resultMap>-->

    <resultMap id="blogResult" type="spring.entity.Blog">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <association property="author" column="author_id" javaType="spring.entity.Author">
            <id property="id" column="author_id"/>
            <result property="name" column="author_name"/>
        </association>
        <collection property="articles" column="id" ofType="spring.entity.Article">
            <id property="id" column="article_id"/>
            <result property="name" column="article_name"/>
            <result property="content" column="article_content"/>
        </collection>
    </resultMap>


    <select id="selectBlogById" parameterType="_int" resultMap="blogResult">
        select
            blog.id                 as id,
            blog.name               as name,
            author.author_id        as author_id,
            author.author_name      as author_name,
            article.article_id      as article_id,
            article.article_name    as article_name,
            article.article_content as article_content
        from blog
        left outer join author on blog.author_id=author.author_id
        left outer join article on blog.id=article.blog_id
        where blog.id=#{id}
    </select>

    <select id="selectAuthorById" parameterType="_int" resultType="author">
        select
        author_id id,author_name name
        from author
        where author_id=#{id}
    </select>

    <select id="selectArticleByBlogId" parameterType="_int" resultType="spring.entity.Article">
        select
        article_id      as id,
        article_name    as name,
        article_content as content
        from article
        where blog_id=#{blog_id}
    </select>

    <select id="selectBlogByAll" resultMap="blogResult">
        select
        blog.id,
        blog.name,
        author.author_id,
        author.author_name,
        article.article_id,
        article.article_name,
        article.article_content
        from blog
        left outer join author on blog.author_id=author.author_id
        left outer join article on blog.id=article.blog_id
        <!--<where>-->
          <!--<if test="blog_id > 1">-->
              <!--AND blog.id = #{blog_id}-->
          <!--</if>-->
          <!--<if test="author_id != null">-->
              <!--AND blog.author_id=#{author_id}-->
          <!--</if>-->
        <!--</where>-->
        <trim prefix="where" prefixOverrides="and |or">
            <if test="blog_id > 1">
                blog.id = #{blog_id}
            </if>
            <if test="author_id != null">
                and blog.author_id = #{author_id}
            </if>
        </trim>
    </select>

    <select id="selectBlogsByIds" resultMap="blogResult">
        select
        blog.id,
        blog.name,
        author.author_id,
        author.author_name,
        article.article_id,
        article.article_name,
        article.article_content
        from blog
        left outer join author on blog.author_id=author.author_id
        left outer join article on blog.id=article.blog_id
        where blog.id IN 
        <foreach collection="collection" item="item" index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <update id="updateBlogById">
        update blog
        <!--<set>-->
            <!--<if test="name != null">name=#{name},</if>-->
            <!--<if test="author_id != null">author_id=#{author_id},</if>-->
        <!--</set>-->
        <trim prefix="set" suffixOverrides=",">
            <if test="name != null">name=#{name},</if>
            <if test="author_id != null">author_id=#{author_id},</if>
        </trim>
        where id=#{blog_id}
    </update>

</mapper>